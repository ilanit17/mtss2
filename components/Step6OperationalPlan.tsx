
import React from 'react';
import { SupportPlan, OperationalTask, TaskType } from '../types';
import { TASK_STATUSES, SUPERVISOR_ROLE_NAME } from '../constants';

interface Step6OperationalPlanProps {
  supportPlan: SupportPlan;
  onAddTask: () => void;
  onUpdateTask: (id: string, field: keyof OperationalTask, value: string | boolean) => void;
  onRemoveTask: (id: string) => void;
}

const taskTypeTranslations: Record<TaskType, string> = {
    'תכנון': 'תכנון',
    'ביצוע': 'ביצוע',
    'מעקב': 'מעקב'
};

const Step6OperationalPlan: React.FC<Step6OperationalPlanProps> = ({
  supportPlan,
  onAddTask,
  onUpdateTask,
  onRemoveTask,
}) => {
  return (
    <div>
      <h3 className="text-2xl font-semibold text-gray-800 mb-4">📋 תוכנית עבודה אופרטיבית</h3>
      <div className="overflow-x-auto">
        <table className="w-full text-sm text-right">
          <thead className="bg-gray-100">
            <tr>
              <th className="p-2 whitespace-nowrap">משימה</th>
              <th className="p-2 whitespace-nowrap">סוג</th>
              <th className="p-2 whitespace-nowrap">מקור הפעולה</th>
              <th className="p-2 whitespace-nowrap">אחראי</th>
              <th className="p-2 whitespace-nowrap">תאריך התחלה</th>
              <th className="p-2 whitespace-nowrap">תאריך סיום</th>
              <th className="p-2 whitespace-nowrap">סטטוס</th>
              <th className="p-2 whitespace-nowrap">הסר</th>
            </tr>
          </thead>
          <tbody>
            {supportPlan.operationalPlan.length > 0 ? (
              supportPlan.operationalPlan.map(task => (
                <tr key={task.id} className={`fade-in hover:bg-gray-50 ${task.isAutoGenerated ? 'bg-teal-50' : 'bg-white'}`}>
                  <td className="p-2 border-b">
                    <textarea
                      rows={2}
                      className="w-full p-1 border border-gray-200 rounded text-sm min-w-[200px]"
                      value={task.task}
                      onChange={(e) => onUpdateTask(task.id, 'task', e.target.value)}
                    />
                  </td>
                  <td className="p-2 border-b text-xs text-gray-600">
                    {task.taskType ? taskTypeTranslations[task.taskType] : ''}
                    {task.isAutoGenerated && <span className="block text-teal-600">(אוטומטי)</span>}
                  </td>
                   <td className="p-2 border-b text-xs text-gray-700 min-w-[150px]">
                    {task.sourceActionName || (task.actionId && supportPlan.coreActions.find(a => a.id === task.actionId)?.name) || 'N/A'}
                  </td>
                  <td className="p-2 border-b min-w-[150px]">
                    <select
                      className="w-full p-1 border border-gray-200 rounded text-sm"
                      value={task.responsible}
                      onChange={(e) => onUpdateTask(task.id, 'responsible', e.target.value)}
                    >
                      <option value="">בחר...</option>
                      <option value={SUPERVISOR_ROLE_NAME}>{SUPERVISOR_ROLE_NAME}</option>
                      {supportPlan.partners.map(p => (
                        <option key={p.id} value={p.name}>{p.name}</option>
                      ))}
                       <option value="לשיבוץ אחראי">לשיבוץ אחראי</option>
                    </select>
                  </td>
                  <td className="p-2 border-b">
                    <input
                      type="date"
                      className="w-full p-1 border border-gray-200 rounded text-sm min-w-[120px]"
                      value={task.startDate}
                      onChange={(e) => onUpdateTask(task.id, 'startDate', e.target.value)}
                    />
                  </td>
                  <td className="p-2 border-b">
                    <input
                      type="date"
                      className="w-full p-1 border border-gray-200 rounded text-sm min-w-[120px]"
                      value={task.endDate}
                      onChange={(e) => onUpdateTask(task.id, 'endDate', e.target.value)}
                    />
                  </td>
                  <td className="p-2 border-b min-w-[100px]">
                    <select
                      className="w-full p-1 border border-gray-200 rounded text-sm"
                      value={task.status}
                      onChange={(e) => onUpdateTask(task.id, 'status', e.target.value)}
                    >
                      {TASK_STATUSES.map(s => <option key={s} value={s}>{s}</option>)}
                    </select>
                  </td>
                  <td className="p-2 border-b text-center">
                    <button onClick={() => onRemoveTask(task.id)} className="text-red-500 hover:text-red-700 text-lg">
                      &times;
                    </button>
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan={8} className="text-center p-4 text-gray-500">לא הוגדרו משימות.</td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
      <button
        onClick={onAddTask}
        className="mt-6 bg-green-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-green-700"
      >
        + הוסף משימה ידנית
      </button>
    </div>
  );
};

export default Step6OperationalPlan;
